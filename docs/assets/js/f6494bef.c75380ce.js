"use strict";(self.webpackChunkrescript_json=self.webpackChunkrescript_json||[]).push([[794],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>v});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,v=d["".concat(c,".").concat(m)]||d[m]||u[m]||l;return t?a.createElement(v,i(i({ref:n},p),{},{components:t})):a.createElement(v,i({ref:n},p))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9229:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const l={sidebar_position:5},i="Json.Encode",o={unversionedId:"modules/json-encode",id:"modules/json-encode",title:"Json.Encode",description:"Turn JSON values into Rescript values",source:"@site/docs/modules/json-encode.md",sourceDirName:"modules",slug:"/modules/json-encode",permalink:"/modules/json-encode",draft:!1,editUrl:"https://github.com/jaredramirez/rescript-json/tree/main/docs/modules/json-encode.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Json.Decode",permalink:"/modules/json-decode"}},c={},s=[{value:"Encoding",id:"encoding",level:2},{value:"<code>value</code>",id:"value",level:3},{value:"<code>encode</code>",id:"encode",level:3},{value:"Primatives",id:"primatives",level:2},{value:"<code>string</code>",id:"string",level:3},{value:"<code>int</code>",id:"int",level:3},{value:"<code>float</code>",id:"float",level:3},{value:"<code>bool</code>",id:"bool",level:3},{value:"<code>null</code>",id:"null",level:3},{value:"Arrays",id:"arrays",level:2},{value:"<code>array</code>",id:"array",level:3},{value:"<code>list</code>",id:"list",level:3},{value:"Objects",id:"objects",level:2},{value:"<code>object</code>",id:"object",level:3},{value:"<code>dict</code>",id:"dict",level:3}],p={toc:s},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"jsonencode"},(0,r.kt)("inlineCode",{parentName:"h1"},"Json.Encode")),(0,r.kt)("p",null,"Turn JSON values into Rescript values"),(0,r.kt)("h2",{id:"encoding"},"Encoding"),(0,r.kt)("h3",{id:"value"},(0,r.kt)("inlineCode",{parentName:"h3"},"value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"type value = Js.Json.t\n")),(0,r.kt)("p",null,"Represents a JavaScript value. Alias to ",(0,r.kt)("a",{parentName:"p",href:"./json#value"},(0,r.kt)("inlineCode",{parentName:"a"},"Json.value")),";"),(0,r.kt)("h3",{id:"encode"},(0,r.kt)("inlineCode",{parentName:"h3"},"encode")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"let encode: (value, ~indentLevel: int) => string\n")),(0,r.kt)("p",null,"Convert a ","[value]"," into a prettified string. From here, you can send it as part of an HTTP request, send to Javascript with an ",(0,r.kt)("inlineCode",{parentName:"p"},"exeternal"),", or anything else! The world is your oyster."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},'let maria: value =\n  object([\n    ("name", "Maria"),\n    ("age", 26),\n  ])\n\nencode(maria, 0) == "{"name":"Maria","age":26}"\n\nencode(maria, 4) ==\n"""{\n    "name": "Maria",\n    "age": 26\n}"""\n')),(0,r.kt)("h2",{id:"primatives"},"Primatives"),(0,r.kt)("h3",{id:"string"},(0,r.kt)("inlineCode",{parentName:"h3"},"string")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"let string: string => value\n")),(0,r.kt)("p",null,"Turn a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," into a Rescript value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},'string("")->encode(~indentLevel=0)      == ""\nstring("abc")->encode(~indentLevel=0)   == "abc"\nstring("hello")->encode(~indentLevel=0) == "hello"\n')),(0,r.kt)("h3",{id:"int"},(0,r.kt)("inlineCode",{parentName:"h3"},"int")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"let int: int => value\n")),(0,r.kt)("p",null,"Turn an ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," into a Rescript value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},'int(42)->encode(~indentLevel=0) == "42"\nint(-7)->encode(~indentLevel=0) == "-7"\nint(0)->encode(~indentLevel=0)  == "0"\n')),(0,r.kt)("h3",{id:"float"},(0,r.kt)("inlineCode",{parentName:"h3"},"float")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"let float: float => value\n")),(0,r.kt)("p",null,"Turn a ",(0,r.kt)("inlineCode",{parentName:"p"},"float")," into a Rescript value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},'float(3.14)->encode(~indentLevel=0)           == "3.14"\nfloat(1.618)->encode(~indentLevel=0)          == "1.618"\nfloat(-42)->encode(~indentLevel=0)            == "-42"\nfloat(Js.Float._NaN)->encode(~indentLevel=0)  == "null"\nfloat(infinity)->encode(~indentLevel=0)       == "null"\n')),(0,r.kt)("h3",{id:"bool"},(0,r.kt)("inlineCode",{parentName:"h3"},"bool")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"let bool: bool => value\n")),(0,r.kt)("p",null,"Turn a ",(0,r.kt)("inlineCode",{parentName:"p"},"bool")," into a Rescript value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},'bool(true)->encode(~indentLevel=0)  == "true"\nbool(false)->encode(~indentLevel=0) == "false"\n')),(0,r.kt)("h3",{id:"null"},(0,r.kt)("inlineCode",{parentName:"h3"},"null")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"let null: value\n")),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," JSON value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},'  null->encode(~indentLevel=0) == "null"\n')),(0,r.kt)("h2",{id:"arrays"},"Arrays"),(0,r.kt)("h3",{id:"array"},(0,r.kt)("inlineCode",{parentName:"h3"},"array")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"let array: (array<'i>, 'i => value) => value\n")),(0,r.kt)("p",null,"Turn an ",(0,r.kt)("inlineCode",{parentName:"p"},"array")," into a JSON array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},'array([1, 2, 3], int)->encode(~indentLevel=0)         == "[1,2,3]"\narray([true, false], bool)->encode(~indentLevel=0)    == "[true,false]"\narray(["a", "b"], string)->encode(~indentLevel=0)     == "[\\"a\\",\\"b\\"]"\n')),(0,r.kt)("p",null,"What if you need to encode your Rescript into a heterogeneous JSON array, like ",(0,r.kt)("inlineCode",{parentName:"p"},'[1, "hey"]'),"? ",(0,r.kt)("em",{parentName:"p"},"Modeling your JSON like this is generally a bad idea.")," Unfortunately, we sometimes have to send JSON/JavaScript to places outside our control. If this is the case for you, can use ",(0,r.kt)("inlineCode",{parentName:"p"},"array")," like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},'[int(1), string("Hey")]\n  ->array(v => v)\n  ->encode(~indentLevel=0)\n  == "[1,\\"Hey\\"]"\n')),(0,r.kt)("p",null,"In Rescript, you can't have an array of heterogenous values.\nIn this example with ",(0,r.kt)("inlineCode",{parentName:"p"},'[1, "Hey"]')," our array type is ",(0,r.kt)("inlineCode",{parentName:"p"},"array<int | string>"),", which is invalid Rescript.\n",(0,r.kt)("em",{parentName:"p"},"But"),", if we convert those values to ",(0,r.kt)("a",{parentName:"p",href:"#value"},(0,r.kt)("inlineCode",{parentName:"a"},"values"))," first, then our type is ",(0,r.kt)("inlineCode",{parentName:"p"},"array<value>"),", which is totally valid Rescript!\nThen for the 2nd function argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"array"),", which is normally converts each array element to a ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),", we just return the argument because it's already a ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),"."),(0,r.kt)("h3",{id:"list"},(0,r.kt)("inlineCode",{parentName:"h3"},"list")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"let list: (list<'i>, 'i => value) => value\n")),(0,r.kt)("p",null,"Turn a ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," into a JSON array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},'list(list{1, 2, 3}, int)->encode(~indentLevel=0)         == "[1,2,3]"\nlist(list{true, false}, bool)->encode(~indentLevel=0)    == "[true,false]"\nlist(list{"a", "b"}, string)->encode(~indentLevel=0)     == "[\\"a\\",\\"b\\"]"\n')),(0,r.kt)("h2",{id:"objects"},"Objects"),(0,r.kt)("h3",{id:"object"},(0,r.kt)("inlineCode",{parentName:"h3"},"object")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"let object: array<(string, value)> => value\n")),(0,r.kt)("p",null,"Create a JSON object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},'let maria: value =\n  object([\n    ("name", "Maria"),\n    ("age", 26),\n  ])\n\nencode(maria, 0) == "{\\"name\\":\\"Maria\\",\\"age\\":26}"\n')),(0,r.kt)("h3",{id:"dict"},(0,r.kt)("inlineCode",{parentName:"h3"},"dict")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"let dict: Js.Dict.t<value> => value\n")),(0,r.kt)("p",null,"Turn a ",(0,r.kt)("inlineCode",{parentName:"p"},"Js.Dict.t")," into a JSON object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},'let maria: value =\n  [\n    ("name", "Maria"),\n    ("age", 26),\n  ]\n  ->Js.Dict.fromArray\n\nencode(maria, 0) == "{\\"name\\":\\"Maria\\",\\"age\\":26}"\n')))}u.isMDXComponent=!0}}]);